---
description: Node.js全栈开发指南
globs: 
alwaysApply: false
---
# Node.js全栈开发指南

## 项目架构

本项目采用前后端分离架构，前端使用React，后端使用Node.js，辅助Python脚本处理特定任务，数据库使用MySQL。

- 前端代码位于 [frontend/](mdc:frontend)
- 后端代码位于 [backend/](mdc:backend)
- 项目根目录配置文件 [package.json](mdc:package.json)

## 后端开发规范 (Node.js)

### 代码风格

- 使用ES6+语法特性
- 使用2空格缩进
- 使用分号结束语句
- 使用camelCase命名变量和函数
- 使用PascalCase命名类
- 使用UPPER_CASE命名常量
- 优先使用const，其次是let，避免使用var
- 使用async/await处理异步操作，避免回调地狱

### 项目结构

- controllers/：处理HTTP请求和响应
- services/：业务逻辑层
- models/：数据模型和数据库交互
- routes/：API路由定义
- middlewares/：中间件
- utils/：工具函数
- config/：配置文件
- scripts/：辅助脚本（包括Python脚本）

### API设计

- 遵循RESTful API设计原则
- 使用正确的HTTP方法（GET、POST、PUT、DELETE等）
- URL使用名词而非动词，例如`/users`而非`/getUsers`
- 使用版本控制，例如`/api/v1/users`
- 返回统一的JSON响应格式
- 使用适当的HTTP状态码

### 错误处理

- 创建统一的错误处理中间件
- 对所有异步操作使用try/catch
- 记录详细的错误日志
- 返回对客户端友好的错误消息
- 不在生产环境中暴露敏感的错误详情

### 安全性

- 使用helmet增强安全头
- 实现CORS保护
- 使用rate limiting防止暴力攻击
- 数据验证和清洗所有输入
- 使用parameterized查询防止SQL注入
- 敏感信息加密存储
- 使用环境变量存储密钥和凭证

### 性能优化

- 使用适当的缓存策略
- 实现数据库查询优化
- 使用连接池管理数据库连接
- 考虑使用Worker线程处理CPU密集型任务
- 实现请求压缩
- 优化异步操作

## 前端开发规范 (React)

### 代码风格

- 使用函数组件和Hooks
- 使用JSX语法
- 组件文件使用PascalCase命名
- CSS类名使用kebab-case
- 使用ES6+语法特性

### 项目结构

- components/：可复用UI组件
- pages/：页面组件
- hooks/：自定义Hooks
- context/：React Context
- services/：API调用服务
- utils/：工具函数
- assets/：静态资源
- styles/：样式文件

### 状态管理

- 使用React Context API和useReducer管理全局状态
- 对于复杂应用，考虑使用Redux
- 将API调用逻辑与UI组件分离

### 性能优化

- 使用React.memo避免不必要的重新渲染
- 使用useMemo和useCallback优化性能
- 实现代码分割和懒加载
- 优化大列表渲染（虚拟列表）
- 使用Web Workers处理复杂计算

### UI和样式

- 使用响应式设计确保跨设备兼容性
- 遵循一致的UI设计语言
- 使用CSS模块或Styled Components隔离样式
- 实现可访问性（WCAG标准）
- 使用主题和变量实现一致的视觉风格

## 数据库规范 (MySQL)

- 使用合适的字段类型和长度
- 建立适当的索引
- 使用外键保持数据完整性
- 命名约定：表名使用复数名词，字段名使用snake_case
- 包含created_at和updated_at时间戳字段
- 软删除而非硬删除（使用deleted_at字段）
- 编写清晰的数据库迁移脚本

## 测试策略

- 编写单元测试（使用Jest）
- 编写集成测试验证API
- 前端组件测试（使用React Testing Library）
- 端到端测试（使用Cypress）
- 保持测试覆盖率在合理水平

## 协作与版本控制

- 使用Git进行版本控制
- 遵循Git分支策略（如Git Flow）
- 编写清晰的提交消息
- 拉取请求前进行代码审查
- 保持适当的文档更新

## 部署与DevOps

- 使用Docker容器化应用
- 实现CI/CD流程
- 编写自动化部署脚本
- 监控应用性能和错误
- 实现自动化备份策略



坚持以上规范，确保全栈应用的代码质量、可维护性和性能。
