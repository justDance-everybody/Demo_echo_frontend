---
description: 数据库设计与MySQL规范指南
globs: 
alwaysApply: false
---
# 数据库设计与MySQL规范指南

## 数据库设计原则

### 表设计

- 每个表必须有一个主键，优先使用自增整数ID或UUID
- 表名使用复数形式，全小写，单词间用下划线分隔（如`users`、`order_items`）
- 字段名使用snake_case命名法，全小写（如`first_name`、`last_login_at`）
- 所有表都应该包含`created_at`和`updated_at`时间戳字段
- 实现软删除而非硬删除，添加`deleted_at`字段（当值为NULL时表示记录未删除）
- 布尔类型字段名应该以`is_`或`has_`开头（如`is_active`、`has_verified`）
- 外键字段名应该以关联表名（单数形式）加`_id`结尾（如`user_id`、`product_id`）
- 限制表的字段数量，一般不超过20-25个字段
- 每个表都应该有明确的注释说明其用途

### 数据类型选择

- 选择合适的数据类型，确保存储效率
- 对于整数：
  - TINYINT (1字节): 0-255
  - SMALLINT (2字节): 0-65535 
  - INT (4字节): 0-4.2亿
  - BIGINT (8字节): 极大值
- 对于字符串：
  - VARCHAR: 可变长度字符串
  - CHAR: 固定长度字符串，适用于长度固定的字段
  - TEXT: 长文本，不要用于需要频繁查询的字段
- 对于日期和时间：
  - DATE: 仅日期
  - TIME: 仅时间
  - DATETIME: 日期和时间
  - TIMESTAMP: 时间戳，自动更新
- 对于布尔值：使用TINYINT(1)而非BOOLEAN
- 对于枚举值：使用ENUM类型或者参考表
- 对于货币：使用DECIMAL而非FLOAT或DOUBLE

### 索引设计

- 为所有外键字段创建索引
- 为经常在WHERE子句中使用的字段创建索引
- 为经常在ORDER BY和GROUP BY中使用的字段创建索引
- 避免在频繁更新的列上创建索引
- 避免在低基数列上使用索引（如性别、状态等）
- 使用复合索引优化多字段查询
- 索引名称遵循`idx_表名_字段名`的命名规范
- 定期分析和优化索引使用情况

### 关系设计

- 正确使用外键约束保持数据完整性
- 实现合理的级联操作（CASCADE, SET NULL等）
- 对多对多关系使用中间表
- 避免过深的表关系层次
- 考虑适当的非规范化以提高查询性能

## SQL编写规范

### 基本规范

- SQL关键字使用大写（如SELECT, FROM, WHERE）
- 表名和字段名使用小写
- 使用缩进和换行提高SQL可读性
- 复杂查询应添加注释解释其功能
- 避免使用`SELECT *`，明确指定需要的字段
- 为表和子查询使用有意义的别名

### 查询优化

- 使用EXPLAIN分析查询性能
- 只查询需要的数据，避免返回大量无用数据
- 使用适当的WHERE条件限制结果集
- 使用JOIN而非子查询（在适当情况下）
- 使用EXISTS代替IN（对于大型子查询）
- 避免在WHERE子句中对字段进行函数操作
- 大型结果集使用LIMIT进行分页
- 避免使用OR操作符，考虑使用UNION ALL或IN
- 优化ORDER BY和GROUP BY操作

### 安全性

- 使用参数化查询防止SQL注入
- 避免在SQL中直接拼接用户输入
- 为应用程序使用最小权限数据库账户
- 敏感数据考虑加密存储
- 实现行级权限控制（如适用）

## 在Node.js中操作MySQL

### 使用ORM

- 优先使用Sequelize或TypeORM等ORM框架
- 定义清晰的模型结构，包括关系、验证和钩子
- 使用事务确保数据一致性
- 实现数据迁移和种子脚本

### 连接管理

- 使用连接池而非单一连接
- 配置合适的连接池大小
- 正确处理连接错误和重试机制
- 在应用关闭时优雅地关闭连接池

### 查询执行

- 使用异步/await模式执行查询
- 实现合理的查询超时
- 捕获并记录查询错误
- 对大型数据集使用流式查询

## 在Python中操作MySQL

### 使用ORM

- 优先使用SQLAlchemy ORM框架
- 定义清晰的模型结构和关系
- 使用会话管理查询和事务
- 实现数据迁移（如使用Alembic）

### 连接管理

- 使用连接池（如SQLAlchemy的Engine）
- 配置适当的池大小和超时
- 正确处理连接错误
- 确保连接在不使用时正确关闭

### 查询执行

- 使用参数化查询
- 适当使用批量操作优化性能
- 对大数据集使用迭代器
- 实现异常处理和日志记录

## 数据库管理与维护

### 备份策略

- 实现定期自动备份
- 测试恢复流程
- 存储备份在安全的地方，考虑异地备份
- 实现时间点恢复能力

### 性能监控

- 监控慢查询日志
- 定期检查和优化索引
- 监控系统资源使用情况
- 实现性能基准测试

### 安全管理

- 实现最小权限原则
- 定期审查数据库权限
- 加密敏感数据
- 遵循数据保护法规要求

### 扩展策略

- 考虑读写分离
- 实现数据分片（如必要）
- 评估垂直或水平扩展需求
- 实现缓存策略减轻数据库负载

## 数据库迁移与版本控制

- 所有数据库更改通过迁移脚本实现
- 迁移脚本应具备向上和向下的能力
- 将迁移脚本纳入版本控制
- 在部署前在测试环境验证迁移脚本
- 重大迁移前制定回滚计划

坚持以上规范，确保数据库设计的合理性、可维护性和性能。

