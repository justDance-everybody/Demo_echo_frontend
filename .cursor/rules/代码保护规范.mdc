---
description: 
globs: 
alwaysApply: true
---
# 规则名称：稳定代码与文档保护 (Stable Code & Documentation Protection)
# 描述：此规则用于标记已通过测试确认的功能模块（包括其代码和相关文档），防止 AI 在没有明确指令的情况下意外修改它们。

---
description: 防止 AI 意外修改已标记为稳定并通过测试的代码区域及其关联文档。
globs:
  - "backend/**" # 主要应用于后端代码
  - "docs/**"    # 也考虑文档
---

## 规则内容

1.  **开发者责任：测试后标记**
    *   当一个功能模块（例如一个 API 接口、一个核心服务函数、一个重要类）开发完成并通过了相关测试（如单元测试、集成测试 `test_api.py`）确认稳定后，开发者**必须**在对应的代码和相关文档中添加稳定标记。
    *   **这是确保规则有效的前提。**

2.  **识别稳定标记**：
    *   AI 必须识别代码注释和文档（如 PRD、开发文档）中的特殊标记。
    *   **代码标记**:
        *   行注释: `# @stable(tested=<YYYY-MM-DD>, ticket=<TicketID>, doc=<DocLink>)`
        *   块注释:
            ```python
            # STABLE_BLOCK_START(tested=<YYYY-MM-DD>, ticket=<TicketID>, doc=<DocLink>)
            # ... stable code ...
            # STABLE_BLOCK_END
            ```
        *   `<YYYY-MM-DD>`: 测试通过日期 (强烈推荐)
        *   `<TicketID>`: 关联的任务/Bug ID (推荐)
        *   `<DocLink>`: 指向相关文档章节的链接或标识符 (推荐)
    *   **文档标记**:
        *   在文档（如 `docs/产品开发需求文档PRD.md`, `docs/后端开发文档.md`）中，对应功能描述或接口定义部分，添加类似标记：
            `<!-- @stable(tested=2025-04-30, code_ref=backend/app/controllers/intent_controller.py#process_intent) -->`
            `<!-- STABLE_FEATURE_START(tested=2025-04-30, code_ref=backend/app/services/execute_service.py) -->`
            ... 功能描述 ...
            `<!-- STABLE_FEATURE_END -->`
        *   `code_ref`: 指向实现该功能的代码文件或函数/类 (推荐)

3.  **AI 修改限制**：
    *   当 AI 被要求进行代码或文档修改时，它必须检查目标区域是否包含稳定标记 (`@stable`, `STABLE_BLOCK_START/END`) 或关联的文档区域是否标记为稳定 (`@stable`, `STABLE_FEATURE_START/END`)。
    *   如果目标代码或文档被标记为稳定，AI **绝对禁止** 修改该区域，除非用户的指令中包含明确的短语，如“**我确认需要修改稳定代码**”或“**强制修改 @stable 标记的区域**”，并且提到了具体的稳定标记、函数/类名或文档章节。
    *   如果 AI 的修改计划涉及到稳定区域，它必须**停止操作**并**主动向用户报告**：“警告：您请求的修改会影响标记为 `@stable` 的 `function_name` 函数（或文档章节 'X.Y'），该部分已于 `<YYYY-MM-DD>` 测试通过并标记为稳定。根据规则，我不能修改此区域。如果您确认要覆盖此保护，请在下一条指令中明确说明‘我确认需要修改稳定代码’并指定目标。”

4.  **豁免情况**：
    *   仅当用户在收到 AI 的警告后，明确发出包含“**我确认需要修改稳定代码**”（或类似强制短语）的指令，并指明要修改的具体稳定部分时，AI 才可进行修改。AI 在执行修改前应再次确认：“正在根据您的强制指令修改稳定代码 `function_name`...”。
    *   全局性的重构或格式化工具的应用，仍需用户在了解可能影响稳定代码后明确批准执行。

5.  **标记维护（开发者责任）**：
    *   如果后续因为 Bug 修复或功能增强确实需要修改稳定区域，开发者在修改并重新测试通过后，**必须**更新代码和文档中的 `@stable` 标记（至少更新测试日期），或者在不再稳定时移除标记。

## 如何使用

功能测试通过后 -> 开发者在代码和文档中添加 `@stable` 标记及相关信息 -> AI 识别标记并拒绝修改，除非用户强制覆盖。

---

> **目标**：建立一个由开发者标记、AI 遵守的稳定代码/文档保护机制。通过明确的标记和 AI 的强制检查，最大限度减少对已验证功能的意外破坏，确保开发过程的稳定性和可追溯性。
