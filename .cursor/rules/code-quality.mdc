---
description: Code Quality Guidelines
globs: 
alwaysApply: false
---
---
description: Code Quality Guidelines
globs: 
---
# AI 辅助编程核心规则

以下规则指导 AI 在编程过程中，优先复用现有实现，避免不必要的代码新增和重复。

## 1. 复用现有实现，避免重复造轮子
- 在引入任何新代码前，先检索代码库中是否已有相同或类似功能。  
- AI 建议时，应优先调用、组合或优化现有函数/模块。

## 2. 优先简化，不盲目扩展
- 若原有实现已能满足需求，AI 不应新增或拆分功能。  
- 仅在原功能无法覆盖新场景时，才考虑新增或重构。

## 3. 可配置化胜过硬编码
- 对可预见的变动场景，优先通过配置或参数化实现。  
- 避免为单一用例硬编码逻辑。

## 4. 环境感知与隔离
- AI 生成的改动需明确区分 `dev`、`test`、`prod` 三种环境。  
- 禁止在生产环境中使用模拟数据或一次性脚本。

## 5. 谨慎修改，保持回退能力
- 修改前，AI 应生成清晰的“变更点列表”。  
- 对潜在风险高的改动，应提示添加单元测试与回滚方案。

## 6. 清晰可维护，行数受控
- 单个函数或类不宜超过 50–100 行。  
- 文件代码超过 200–300 行时，AI 应建议拆分或抽象公共逻辑，进行封装。

## 7. 生成前必须审核
- AI 每次输出代码片段前，在注释中标明“复用点”或“新增点”。  
- 由开发者确认后，方可合入主分支。

---

> **目标**：让 AI 成为“最懂现有代码”的助理，既提高开发效率，又杜绝不必要的冗余扩张。

# Code Quality Guidelines

## Verify Information
Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.

## File-by-File Changes
Make changes file by file and give me a chance to spot mistakes.

## No Apologies
Never use apologies.

## No Understanding Feedback
Avoid giving feedback about understanding in comments or documentation.

## No Whitespace Suggestions
Don't suggest whitespace changes.

## No Summaries
Don't summarize changes made.

## No Inventions
Don't invent changes other than what's explicitly requested.

## No Unnecessary Confirmations
Don't ask for confirmation of information already provided in the context.

## Preserve Existing Code
Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.

## Single Chunk Edits
Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.

## No Implementation Checks
Don't ask the user to verify implementations that are visible in the provided context.

## No Unnecessary Updates
Don't suggest updates or changes to files when there are no actual modifications needed.

## Provide Real File Links
Always provide links to the real files, not x.md.

## No Current Implementation
Don't show or discuss the current implementation unless specifically requested.


## others 
- Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.
- Make changes file by file and give me a chance to spot mistakes.
- Never use apologies.
- Avoid giving feedback about understanding in comments or documentation.
- Don't suggest whitespace changes.
- Don't summarize changes made.
- Don't invent changes other than what's explicitly requested.
- Don't ask for confirmation of information already provided in the context.
- Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.
- Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.
- Don't ask the user to verify implementations that are visible in the provided context.
- Don't suggest updates or changes to files when there are no actual modifications needed.
- Always provide links to the real files, not the context generated file.
- Don't show or discuss the current implementation unless specifically requested.
- Remember to check the context generated file for the current file contents and implementations.
- Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.
- Adhere to the existing coding style in the project for consistency.
- When suggesting changes, consider and prioritize code performance where applicable.
- Always consider security implications when modifying or suggesting code changes.
- Suggest or include appropriate unit tests for new or modified code.
- Implement robust error handling and logging where necessary.
- Encourage modular design principles to improve code maintainability and reusability.
- Ensure suggested changes are compatible with the project's specified language or framework versions.
- Replace hardcoded values with named constants to improve code clarity and maintainability.
- When implementing logic, always consider and handle potential edge cases.
- Include assertions wherever possible to validate assumptions and catch potential errors early.