---
description: Python脚本应用开发指南
globs: 
alwaysApply: false
---
# Python脚本应用开发指南

## 项目架构

本项目包含Python脚本开发，采用Node.js+Python混合架构，前端使用React，后端使用Node.js和Python脚本，数据库使用MySQL。

- 前端目录结构位于 [frontend/src](mdc:frontend/src)
- 后端Node.js服务位于 [backend/src](mdc:backend/src)
- Python脚本应当放置在 [backend/src/scripts](mdc:backend/src/scripts) 目录中

## Python开发规范

### 代码风格

- 遵循PEP 8编码规范
- 使用4个空格进行缩进，不使用Tab
- 行长度不超过120个字符
- 函数和类之间空两行，类中的方法空一行
- 使用有意义的变量名和函数名，采用snake_case命名方式
- 类名使用CamelCase命名规则
- 常量使用全大写和下划线分隔

### 文档与注释

- 每个模块、类、函数都应该有文档字符串（docstring）
- 使用Google风格的docstring格式
- 复杂的逻辑应该添加适当的注释
- 确保所有的公共API都有完整的文档

### 依赖管理

- 使用虚拟环境（venv或conda）隔离项目依赖
- 在项目根目录维护requirements.txt文件
- 指定依赖的具体版本号，确保环境一致性
- 尽量减少依赖的数量，避免引入不必要的包

### 错误处理

- 使用try/except块处理可能出现的异常
- 不要捕获通用Exception，应具体指明捕获的异常类型
- 日志记录异常信息，便于调试
- 在API边界，确保异常被适当处理，不向上层传播未知异常

### 安全性

- 不在代码中硬编码敏感信息（如密码、API密钥）
- 使用环境变量或配置文件存储敏感信息
- 对用户输入进行验证和清洗，防止注入攻击
- 使用参数化查询来防止SQL注入

### 性能优化

- 使用适当的数据结构和算法
- 对频繁执行的代码进行优化
- 使用生成器处理大量数据
- 考虑使用异步编程（asyncio）提高I/O密集型任务性能
- 对计算密集型任务，考虑使用多进程

### 测试

- 编写单元测试，确保代码质量
- 使用pytest作为测试框架
- 确保测试覆盖关键功能和边界情况
- 集成测试验证与其他组件的交互
- 优先使用uv来运行python代码

## 与Node.js集成

- Python脚本应设计为命令行工具，接受参数并返回JSON格式结果
- 使用Node.js的child_process模块调用Python脚本
- 通过标准输出/输入进行数据交换
- 确保异常处理在Python和Node.js之间传递正确的错误信息

## 数据库交互

- 使用SQLAlchemy ORM框架操作MySQL数据库
- 避免在Python脚本中直接构建SQL语句
- 使用连接池管理数据库连接
- 事务管理确保数据一致性

## 日志记录

- 使用Python的logging模块记录日志
- 配置适当的日志级别（DEBUG, INFO, WARNING, ERROR, CRITICAL）
- 日志应包含时间戳、日志级别、模块名和详细信息
- 关键操作和错误必须记录日志

## 部署考虑

- 脚本应能在不同环境（开发、测试、生产）中运行
- 使用配置文件区分不同环境的设置
- 考虑容器化部署，确保环境一致性
- 定期备份数据和代码

## 代码审查清单

- 代码是否遵循PEP 8规范？
- 是否有适当的文档和注释？
- 是否进行了错误处理？
- 是否有适当的日志记录？
- 是否考虑了安全性？
- 代码是否可测试？
- 是否有冗余或可优化的代码？

坚持以上规范，确保Python脚本的高质量、可维护性和安全性。

